{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nexport default function useVisualMode(initialMode) {\n  _s();\n\n  const [mode, setMode] = useState(initialMode);\n  const [history, setHistory] = useState([initialMode]); //TRANSITION FUNCTION\n\n  function transition(newMode) {\n    setHistory(prev => [...prev, newMode]);\n    setMode(newMode);\n  } //BACK FUNCTION\n\n\n  function back() {\n    if (history.length > 1) {\n      const newHistory = history.slice(0, -1);\n      setHistory(newHistory);\n      setMode(newHistory[newHistory.length - 1]);\n    }\n  }\n\n  return {\n    mode,\n    transition,\n    back\n  };\n}\n\n_s(useVisualMode, \"7z/QgVGTjooXPoYCmnO9tSwg8ns=\");","map":{"version":3,"sources":["/home/megamind/lighthouse/allforlife/allforlife-1/client/src/hooks/useVisualMode.js"],"names":["useState","useVisualMode","initialMode","mode","setMode","history","setHistory","transition","newMode","prev","back","length","newHistory","slice"],"mappings":";;AAAC,SAASA,QAAT,QAAyB,OAAzB;AAGC,eAAe,SAASC,aAAT,CAAuBC,WAAvB,EAAoC;AAAA;;AAEjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAACE,WAAD,CAAhC;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,CAACE,WAAD,CAAD,CAAtC,CAHiD,CAMjD;;AACA,WAASK,UAAT,CAAoBC,OAApB,EAA6B;AAC3BF,IAAAA,UAAU,CAACG,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUD,OAAV,CAAT,CAAV;AACAJ,IAAAA,OAAO,CAACI,OAAD,CAAP;AACD,GAVgD,CAajD;;;AACA,WAASE,IAAT,GAAgB;AACd,QAAIL,OAAO,CAACM,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAMC,UAAU,GAAGP,OAAO,CAACQ,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CAAnB;AACAP,MAAAA,UAAU,CAACM,UAAD,CAAV;AACAR,MAAAA,OAAO,CAACQ,UAAU,CAACA,UAAU,CAACD,MAAX,GAAmB,CAApB,CAAX,CAAP;AACD;AACF;;AAED,SAAO;AAAER,IAAAA,IAAF;AAAQI,IAAAA,UAAR;AAAoBG,IAAAA;AAApB,GAAP;AACD;;GAvBuBT,a","sourcesContent":[" import { useState } from 'react';\n\n\n  export default function useVisualMode(initialMode) {\n\n    const [mode, setMode] = useState(initialMode);\n    const [history, setHistory] = useState([initialMode]);\n\n\n    //TRANSITION FUNCTION\n    function transition(newMode) {\n      setHistory(prev => [...prev, newMode]);\n      setMode(newMode);\n    } \n  \n\n    //BACK FUNCTION\n    function back() {\n      if (history.length > 1) {\n        const newHistory = history.slice(0, -1);\n        setHistory(newHistory);\n        setMode(newHistory[newHistory.length -1]);\n      }\n    }\n\n    return { mode, transition, back }\n  }\n \n \n\n "]},"metadata":{},"sourceType":"module"}